
一、Redis的消息机制：消息系统
	1、消息的类型
		（1）Queue消息：队列（点对点）
		（2）Topic消息：主题（广播、群发）：发布消息、订阅消息
		
	2、常用的消息系统
		（1）Redis：只支持Topic
		（2）Kafka：只支持Topic，需要ZooKeeper的支持
		（3）JMS：标准，Java Messaging Service，产品：Weblogic、Websphere
		            支持Queue，也支持Topic
					
	3、Redis的消息机制
		命令：publish 发布消息
		      subscribe：订阅消息
			  psubscribe：可以使用通配符来订阅消息

二、重点：Redis的持久化	（本质上，就是一种备份和恢复）
	1、RDB：默认
		（*）看成是一种快照，每隔一段时间，将内存中的数据保存到硬盘上的文件：dump.rdb
		（*）RDB生成策略：参数设置
		       格式：save 时间（秒）  数字（发生变化的key的个数）
				save 900 1      在15分钟内，如果有1个key发生了变化，就执行RDB
				save 300 10     在5分钟内，如果有10key发生了变化，就执行RDB
				save 60 10000   在60秒内，如果有1万key发生了变化，就执行RDB
				
		（*）其他参数：
				stop-writes-on-bgsave-error yes 当后台写进程出错时，禁止写入新的数据
					首先需要指定一个命令：bgsave（手动触发RDB）
					
				rdbcompression yes 是否压缩
					如果压缩，可以节约空间；会影响备份和恢复的性能
					
				rdbchecksum yes
				dbfilename dump.rdb
				dir ./

		（*）RDB的优点和缺点：
			（1）优点：恢复快
			（2）缺点：在两次RDB之间，可能造成数据的丢失
	
	2、AOF：记录日志
		（*）默认是禁用：参数 appendonly yes
		（*）AOF记录日志的策略：参数
				# appendfsync always  每个操作都记录日志；优点：最安全  缺点：慢
				                      注意：安全和性能都是矛盾的
				
				appendfsync everysec  默认，每秒记录一次
				# appendfsync no      由操作系统来决定记录日志的方式
		
		（*）AOF的日志重写：overwrite
				举例：假设每个操作都记录日志
					 set money 0
					 incr money
					 incr money
					 ****
					 ****
					 incr money    100次
					 
					 总共记录：101条日志，最终的结果是：money=100
					 进行日志的重写：
					 set money 100
					 
				演示Demo：使用Redis的压力测试工具，模拟10万操作
							bin/redis-benchmark -n 100000
	
		（*）参数设置
			no-appendfsync-on-rewrite no  执行重写的时候，不写入新的日志
			
			auto-aof-rewrite-percentage 100  当AOF文件比上次的大小超过了100%，执行重写
			auto-aof-rewrite-min-size 64mb   当AOF日志文件达到了64M，执行重写
			
	3、问题：如果RDB和AOF都有，优先使用哪个进行恢复？
		If the AOF is enabled on startup Redis will load the AOF, that is the file
		with the better durability guarantees.

	4、补充点知识：关系型数据库中，以Oracle为例
					一般：备份采用RMAN来备份，相当于Redis的RDB
					      采用日志（Oracle的联机重做日志文件）：相当于AOF
	
	
三、重点：Redis的主从复制
	1、Redis主从复制集群
		作用：（1）主从复制，主从备份，防止主节点宕机
		            主节点写入数据，从节点读取数据
			  （2）任务分离，分摊主节点的压力
			         举例：朋友圈，读的压力大？还是写的压力大？
			  （3）读写分离：主节点写数据，从节点（s）读取数据
			  
		主从复制的架构：（1）星型模型
		                （2）线型模型
						
		默认：从节点是只读的
		注意：主节点和从节点数据同步的过程
				第一次：同步的是RDB
				后面的：同步的是AOF
			  一定要注意：一次启动从节点的个数不能太多
	
	
	2、Redis的分片：提一下，使用第三方的软件来实现负载均衡
			安装：nutcracker-0.3.0.tar.gz
	
四、重点：Redis的HA（哨兵机制）
	1、从Redis 2.4以后的版本开始，才有
	2、核心配置文件 sentinel.conf
		sentinel monitor mymaster 192.168.157.111 6379 1
		                 别名      主节点IP       端口 几个哨兵
						 
	3、启动   bin/redis-sentinel conf/sentinel.conf 
	   日志：
		+monitor master mymaster 192.168.157.111 6379 quorum 1
		+slave slave 192.168.157.111:6380 192.168.157.111 6380 @ mymaster 192.168.157.111 6379
		+slave slave 192.168.157.111:6381 192.168.157.111 6381 @ mymaster 192.168.157.111 6379
	   
	   把主节点杀掉，观察日志：
	   sdown master mymaster 192.168.157.111 6379
	   
	   try-failover master mymaster 192.168.157.111 6379
	   
	   selected-slave slave 192.168.157.111:6381 把6381选成主节点
	   
	   把其他的从节点连接到新的主节点上
	   slave slave 192.168.157.111:6380 192.168.157.111 6380 @ mymaster 192.168.157.111 6381
	   

五、大数据实时计算框架：Storm
	（一）什么是实时计算？跟离线计算的区别？常见的实时计算框架？
		1、什么是实时计算？流式计算
			举例：自来水厂处理自来水的过程
			
		2、跟离线计算的区别？
			（*）离线计算：代表MapReduce、Spark Core
			               采集数据：Sqoop、Flume
						   强调是：批处理
			（*）实时计算：代表Storm等等
			               采集数据：Flume
						   强调是：源源不断
						   
		3、常见的实时计算框架
			（*）Apache Storm
			（*）Spark Streaming：不是真正的实时计算（流式计算）
			                      本质是：把流式数据转成离散数据，还是离线计算
			（*）JStorm：阿里巴巴开发，基于Storm的开发的
			（*）Flink
	
	（二）Apache Storm的体系架构



























