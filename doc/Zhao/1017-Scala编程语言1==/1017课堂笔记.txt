
Scala语法基础 
================================================
一、循环语句
	1、类似Java：for、while、do...while
	2、使用foreach进行迭代（循环）

二、Scala的函数参数
	1、函数参数的求值策略
		（1）call by value  定义：  :
				对函数实参求值，并且只求一次
		
		（2）call by name   定义：  :=>
		        函数的实参在函数体内部每次用到的时候，都会被求值
				
		（3）复杂点的例子
				5-05	
				x是call by value， y是call by name
				def bar(x:Int,y: => Int):Int = 1
				
				定义一个死循环
				def loop():Int = loop
				
				调用bar函数，哪次会产生死循环？
				1、bar(1,loop)  正常返回1
				2、bar(loop,1)   会产生死循环
				
				分析原因！！

	2、Scala中的函数参数的类型
		（1）默认参数
		     def func1(name:String="Tom"):String = "Hello " + name
				
		
		（2）代名参数：应用的场景：当有多个默认参数的时候，通过代名参数可以确定是给哪一个参数赋值
		     def func2(str:String="Good Morning ",name:String="Tom ",age:Int=20)
			 =
			 str + name + " and the age of " + name + " is " + age
			 
			 调用一下
			 func2()
			 func2(name="abcd")  把abcd付给name参数
		
		
		（3）可变参数
			scala> //可变参数

			scala> //求多个数字的和

			scala> def sum(args:Int*) = {
				 |     var result = 0
				 |     for(s <- args) result += s
				 |     result
				 | }
			sum: (args: Int*)Int

			scala> //调用

			scala> sum(1,2,3)
			res4: Int = 6

			scala> sum(1,2,3,4,5)
			res5: Int = 15

三、懒值（lazy值）：常量如果是lazy的，他的初始化就会被推迟，推迟到第一次使用该常量的时候

	做一点铺垫：Spark的核心是RDD（数据集合），操作数据集合中的数据，需要使用算子（函数、方法）
				算子有两种
				1、Transformation：延时加载，不会触发计算
				2、Action：会触发计算
			scala> //lazy值 懒值

			scala> val x:Int = 10
			x: Int = 10

			scala> val y:Int = x + 1
			y: Int = 11

			scala> //上面的特点是立即执行计算

			scala> lazy val z:Int = x + 1
			z: Int = <lazy>

			scala> //常量z的初始化就会被推迟

			scala> //没 有发计算

			scala> z
			res6: Int = 11

	再举一个例子：读文件
		（1）存在的文件
		（2）不存在的文件
			scala> val words = scala.io.Source.fromFile("d:\\temp\\student.txt").mkString
			words: String =
			1 Tom 23
			2 Mary 25
			3 Mike 24
			5 Jone 20
			6 Jerry 21

			scala> lazy val words = scala.io.Source.fromFile("d:\\temp\\student.txt").mkString
			words: String = <lazy>

			scala> words
			res7: String =
			1 Tom 23
			2 Mary 25
			3 Mike 24
			5 Jone 20
			6 Jerry 21

			scala> //读取一个不存在的文件

			scala> lazy val words = scala.io.Source.fromFile("d:\\temp\\aaa.txt").mkString
			words: String = <lazy>

			scala> //不会产生Exception

			scala> words
			java.io.FileNotFoundException: d:\temp\aaa.txt (系统找不到指定的文件。)
			  at java.io.FileInputStream.open0(Native Method)
			  at java.io.FileInputStream.open(FileInputStream.java:195)
			  at java.io.FileInputStream.<init>(FileInputStream.java:138)
			  at scala.io.Source$.fromFile(Source.scala:91)
			  at scala.io.Source$.fromFile(Source.scala:76)
			  at scala.io.Source$.fromFile(Source.scala:54)
			  at .words$lzycompute(<console>:11)
			  at .words(<console>:11)
			  ... 32 elided

			scala>


四、简介：例外：Exception
	类似Java：try..catch..finally
	参考讲义
	
五、数组
	1、数组的类型
		（1）定长数组：Array
			scala> // 定长数组: Array

			scala> val a = new Array[Int](10)
			a: Array[Int] = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

			scala> val b = new Array[String](5)
			b: Array[String] = Array(null, null, null, null, null)

			scala> val c = Array("Tom","Mary","Mike")
			c: Array[String] = Array(Tom, Mary, Mike)
		
		
		（2）变长数组：ArrayBuffer
				scala> import scala.collection.mutable.ArrayBuffer
				import scala.collection.mutable.ArrayBuffer

				scala> val d = ArrayBuffer[Int]()
				d: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer()

				scala> //往变长数组中添加元素

				scala> d += 1
				res9: d.type = ArrayBuffer(1)

				scala> d += 2
				res10: d.type = ArrayBuffer(1, 2)

				scala> d += 3
				res11: d.type = ArrayBuffer(1, 2, 3)

				scala> //一次添加多个元素

				scala> d += (10,20,30)
				res12: d.type = ArrayBuffer(1, 2, 3, 10, 20, 30)			
				
				去掉最后的两个元素
				d.trimEnd(2)
				
				scala> //遍历数组

				scala> var a = Array("Tom","Mary","Mike")
				a: Array[String] = Array(Tom, Mary, Mike)

				scala> //使用for语句进行遍历

				scala> for( s<- a) println(s)
				Tom
				Mary
				Mike

				scala> //使用foreach

				scala> a.foreach(print)
				TomMaryMike
				
		解释一下：
		    myArray1.sortWith(_ > _) 
			写完整
			myArray1.sortWith((a,b)=>{if(a>b) true else false})
			
			匿名函数：(a,b)=>{if(a>b) true else false}    ----> 简写：_ > _
			把匿名函数作为了sortWith参数值 -----> 把sortWith叫做高阶函数（Scala中的函数式编程）
			
	2、多维数组：和Java一样，通过数组的数组来实现
	   参考一下讲义的例子

六、映射：就是<key value>的对，用Map来表示
		scala> //创建一个Map(映射)

		scala> //学生的成绩

		scala> val scores = Map("Tom"->80,"Mary"->85,"Mike"->82)
		scores: scala.collection.immutable.Map[String,Int] = Map(Tom -> 80, Mary -> 85, Mike -> 82)

		scala> //Scala中，映射有两种  1、不可变的Map  2、可变的Map

		scala> //定义一个可变的Map

		scala> //保存学生的语文成绩

		scala> //有不同写法

		scala> val chinese = scala.collection.mutable.Map(("Alice",80),("Bob",95),("Mary",75))
		chinese: scala.collection.mutable.Map[String,Int] = Map(Bob -> 95, Alice -> 80, Mary -> 75)

		scala> //映射的操作

		scala> //1、获取映射中的值

		scala> chinese("Bob")
		res19: Int = 95

		scala> chinese.get("Bob")
		res20: Option[Int] = Some(95)

		scala> //2、获取一个不存在的值

		scala> chinese("Tom")
		java.util.NoSuchElementException: key not found: Tom
		  at scala.collection.MapLike$class.default(MapLike.scala:228)
		  at scala.collection.AbstractMap.default(Map.scala:59)
		  at scala.collection.mutable.HashMap.apply(HashMap.scala:65)
		  ... 32 elided

		scala> //先判断一下 ，key是否存在

		scala> if(chinese.contains("Tom")){
			 |    chinese("Tom")
			 | }else{
			 |    -1
			 | }
		res22: Int = -1

		scala> //可以简写

		scala> chinese.getOrElse("Tom",-1)
		res23: Int = -1

		scala> chinese.getOrElse("Alice",-1)
		res24: Int = 80
		
		scala> //更新映射中的值：必须是可变的映射

		scala> chinese("Bob")
		res25: Int = 95

		scala> chinese("Bob") = 100

		scala> chinese("Bob")
		res27: Int = 100

		scala> //如何进行迭代？类似数组

		scala> //可以使用for ,foreach

		scala> for(s <- chinese) println(s)
		(Bob,100)
		(Alice,80)
		(Mary,75)

		scala> chinese.foreach(println)
		(Bob,100)
		(Alice,80)
		(Mary,75)


七、元组：Tuple
	1、复习一下：Tuple在Pig中、在Storm中都用到了
	2、Scala的Tuple：是不同类型的值的集合
		scala> //Tuple3代表的是有三个元素

		scala> val t2 = Tuple2(2,"World")
		t2: (Int, String) = (2,World)

		scala> //访问Tuple中的元素

		scala> t1.
		_1   _3         copy     hashCode   productArity     productIterator   toString   zipped
		_2   canEqual   equals   invert     productElement   productPrefix     x

		scala> t1._1
		res30: Int = 1

		scala> t1._2
		res31: Double = 3.14

		scala> t1._3
		res32: String = Hello

		scala> //如何遍历Tuple中的元素

		scala> //首先使用productIterator生成再遍历

		scala> t1.productIterator.foreach(println)
		1
		3.14
		Hello
		
			
Scala的面向对象：类似Java
===================================================
一、面向对象的基本概念
	1、封装：类class
	2、继承
	3、多态

二、定义类：关键字class
	举例：创建一个学生类


三、内部类

四、类的构造器：两种
	1、主构造器
	2、辅助构造器
	
五、Object对象：相当于Java中的static
	1、Object中的内容都是静态的
	
	
六、apply方法：可以省略new关键字，根据自己的需要进行初始化


七、继承


八、特质（trait）：类似Java中的抽象类，并且支持多重继承


九、包和包对象































