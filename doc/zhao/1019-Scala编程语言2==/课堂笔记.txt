Scala的面向对象：类似Java
===================================================
一、面向对象的基本概念
	1、封装：类class
	2、继承
	3、多态

二、定义类：关键字class
	举例：创建一个学生类


三、内部类（嵌套类）：就是在一个类的内部，定义了另外一个类


四、类的构造器：两种
	1、主构造器：和类的声明在一起，并且一个类只有一个主构造器
	2、辅助构造器：一个类可以有多个辅助构造器，通过关键字this
	
	
	
	
五、Object对象：相当于Java中的static
	1、Object中的内容都是静态的
	2、Scala中，没有静态修饰符static
	3、如果class的名字，跟object的名字一样，这时候就把这个object叫做类的伴生对象
	4、举例
		（1）使用object实现单例模式：一个类只有一个对象
				如果在Java中，构造器定义为private，提供getInstance方法
		
		（2）使用App对象：应用程序对象
				好处：可以省略main方法
		
	
六、apply方法：可以省略new关键字，根据自己的需要进行初始化
			   apply方法必须写在伴生对象中

	scala> //创建一个数组

	scala> var myarray = Array(1,2,3)   ----> 使用了apply方法
	myarray: Array[Int] = Array(1, 2, 3)

	scala> //本质就是创建一个Array对象

	scala> //省略了new关键字
	
	
七、继承：
	1、跟Java一样，使用关键字extends
	2、抽象类、抽象字段


八、特质（trait）：类似Java中的抽象类，并且支持多重继承
	本质：就是抽象类，特点：支持多重继承


九、包和包对象：参考讲义
    package
	package object



Scala的函数式编程：Scala是一个多范式的编程语言

举例：使用Spark执行WordCount
sc是Spark的一个对象，SparkContext这个对象非常重要

sc.textFile("hdfs://bigdata111:9000/input/data.txt").flatMap(_.split(" ")).map((_,1)).reduceByKey(_+_).collect

===================================================
一、回顾：Scala中的函数：是头等公民
    关键字：def

二、匿名函数：没有名字的函数
	scala> //定义一个匿名函数

	scala> (x:Int) => x*3
	res1: Int => Int = <function1>

	scala> //调用匿名函数

	scala> //定义一个 数组，把数组中的每个元素乘以3

	scala> //Array(1,2,3) 把Array中的每个元素作为x参数值，传递给匿名函数

	scala> Array(1,2,3).map((x:Int) => x*3)
	res2: Array[Int] = Array(3, 6, 9)

	scala> //把(x:Int) => x*3 作为了map的参数值

三、高阶函数（带有函数参数的函数）：把一个函数作为另一个函数的参数值

四、高阶函数示例
	（*）map：相当于一个循环，对某个集合中的每个元素进行操作（就是接受一个函数），返回一个新的集合
	         val numbers = List(1,2,3,4,5,6,7,8,9,10)
			 numbers.map((i:Int)=>i*2)
			 简写 numbers.map(_ * 2)
			 
	（*）foreach：相当于一个循环，对某个集合中的每个元素进行操作（就是接受一个函数），不返回结果
	         numbers.foreach((i:Int)=>i*2)
	
	
	（*）filter: 过滤，选择满足条件的数据
			查询能够被2整除的数字
			numbers.filter((i:Int)=> i%2==0) 如果是true，就返回结果
	
	（*）zip: 合并集合
			List(1,2,3).zip(List(4,5,6))
	
	
	（*）partition: 根据断言（就是条件，通过一个匿名函数来实现）的结果，来进行分区
			举例：把能够被2整除的分成一个区，不能整除的分成另一个区
			numbers.partition((i:Int)=> i%2==0)
	
	（*）find: 查找第一个满足条件（断言）的元素
	        查询第一个能够被3整除的数字
			numbers.find(_%3 == 0)
	
	（*）flatten：把嵌套的结构展开
			List(List(2, 4, 6, 8, 10),List(1, 3, 5, 7, 9)).flatten
	
	（*）flatMap 相当于 map + flatten
			var myList = List(List(2, 4, 6, 8, 10),List(1, 3, 5, 7, 9))
			myList.flatMap(x=> x.map(_*2))
			结果 res16: List[Int] = List(4, 8, 12, 16, 20, 2, 6, 10, 14, 18)
			
			过程 （1）将List(2, 4, 6, 8, 10)和List(1, 3, 5, 7, 9)调用x=> x.map(_*2)
			     （2）再合并成一个List



五、概念：闭包、柯里化
































